// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã –∏ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–æ–≤
const CURRENCIES = [
    { code: 'USD', name: '–î–æ–ª–ª–∞—Ä', flag: 'üá∫üá∏' },
    { code: 'EUR', name: '–ï–≤—Ä–æ', flag: 'üá™üá∫' },
    { code: 'CNY', name: '–Æ–∞–Ω—å', flag: 'üá®üá≥' },
    { code: 'THB', name: '–ë–∞—Ç', flag: 'üáπüá≠' },
    { code: 'AED', name: '–î–∏—Ä—Ö–∞–º', flag: 'üá¶üá™' },
    { code: 'HKD', name: '–ì–æ–Ω–∫–æ–Ω–≥.', flag: 'üá≠üá∞' }
];

let rates = {}; // –∫—É—Ä—Å—ã –¶–ë
let bitkapUsdtRub = 0;
let current = 'USD';

// –†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç
const currenciesDiv = document.getElementById('currencies');
CURRENCIES.forEach(c => {
    const btn = document.createElement('button');
    btn.innerText = c.code;
    btn.className = 'curr-btn' + (c.code === current ? ' active' : '');
    btn.onclick = () => handleCurrency(c.code);
    currenciesDiv.appendChild(btn);
});

function handleCurrency(code) {
    current = code;
    [...currenciesDiv.children].forEach(btn => {
        btn.classList.toggle('active', btn.innerText === code);
    });
    document.getElementById('currency-label').innerText = code;
    document.getElementById('flag-usd').innerText = CURRENCIES.find(c => c.code === code).flag || '';
    update();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Å –¶–ë –†–§
async function fetchRates() {
    try {
        const response = await fetch('https://www.cbr-xml-daily.ru/daily_json.js');
        const data = await response.json();
        CURRENCIES.forEach(c => {
            rates[c.code] = data.Valute[c.code]?.Value || 0;
        });
        // –î–æ–±–∞–≤–∏–º –∫—É—Ä—Å RUB –¥–ª—è —Å–∞–º–æ–æ–±–º–µ–Ω–∞ (RUB->RUB)
        rates["RUB"] = 1;
        update();
    } catch (e) {
        document.getElementById('rate').innerText = '–û—à–∏–±–∫–∞ –∫—É—Ä—Å–∞';
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ USDT\RUB —Å BitKap
async function fetchBitkap() {
    try {
        const res = await fetch('https://bitkap.net/api/v2/public/tickers');
        const data = await res.json();
        bitkapUsdtRub = Number(data.data?.['USDT_RUB']?.last) || 0;
        update();
    } catch (e) {
        bitkapUsdtRub = 0;
        update();
    }
}

document.getElementById('amount').oninput = update;

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞
function update() {
    const amount = Math.max(+document.getElementById('amount').value, 0);
    const rate = rates[current] || 0;
    document.getElementById('rate').innerText = rate ? rate.toLocaleString('ru-RU', { maximumFractionDigits: 2 }) : '‚Äî';

    let result = '‚Äî', usdtResult = '', diffResult = '', compareHtml = '';
    const resultBlock = document.getElementById('result-block');
    const compareBlock = document.getElementById('compare');
    compareBlock.style.display = "none";

    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—É–º–º–∞ > 0 –∏ –≤–∞–ª—é—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if (rate && amount > 0) {
        const rub = amount * rate;
        result = `<b>${rub.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} ‚ÇΩ</b>`;

        // USD - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å USDT/BitKap
        if (current === 'USD' && bitkapUsdtRub > 0) {
            const usdt_rub = amount * bitkapUsdtRub;
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            usdtResult = `<span>–ß–µ—Ä–µ–∑ <b>USDT/BitKap</b>: <span class="compare-res">${usdt_rub.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} ‚ÇΩ</span></span>`;

            const diff = rub - usdt_rub;
            let sign = diff > 0 ? "+" : "";
            diffResult = `<span class="compare-warning">–†–∞–∑–Ω–∏—Ü–∞: ${sign}${diff.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} ‚ÇΩ</span>`;

            compareHtml = usdtResult + diffResult;
            compareBlock.style.display = "";
            compareBlock.innerHTML = compareHtml;

            addToHistory(`${amount} USD ‚Üí ${rub.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} ‚ÇΩ | USDT: ${usdt_rub.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} ‚ÇΩ`);
        } else {
            compareBlock.style.display = "none";
            addToHistory(`${amount} ${current} ‚Üí ${rub.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} ‚ÇΩ`);
        }
    } else {
        compareBlock.style.display = "none";
    }

    document.getElementById('result').innerHTML = result;
}

function addToHistory(str) {
    // –ü–∞–º—è—Ç—å –≤ —Å–µ—Å—Å–∏–∏
    let hArr = JSON.parse(sessionStorage.getItem('_history') || '[]');
    if (str && hArr[0] !== str) { // –ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–¥—Ä—è–¥
        hArr.unshift(str);
        if (hArr.length > 4) hArr = hArr.slice(0, 4);
        sessionStorage.setItem('_history', JSON.stringify(hArr));
        renderHistory();
    }
}
function renderHistory() {
    let hArr = JSON.parse(sessionStorage.getItem('_history') || '[]');
    document.getElementById('history').innerHTML = hArr.join('<br>');
}
window.onload = async () => {
    renderHistory();
    await fetchRates();
    await fetchBitkap();
    update();
}